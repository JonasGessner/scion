// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
